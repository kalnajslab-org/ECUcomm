#ifndef _ECULORA_H_
#define _ECULORA_H_

//
// The ECU LoRa interface
// This interface is used to send and receive ECU messages over LoRa.
//
// ecu_lora_rx(): Returns the next received message.
// ecu_lora_tx(): Sends a message.
//
// ECULoRaPacket_t is the structure of the packets that are sent over LoRa.
//
// ECULoRaMsg_t is the structure of the messages that are 
//   decoded from ECULoRaPacket_t and delivered to the end user.
//
// Received LoRa packets are handled in the rxReadyISR() function, which is
// called as an interrupt when a packet is received. 
//
// The rxReadyISR function decodes the packet and stores it in the
// rx_lora_packet structure.
//
// The rx_lora_packet structure is then decoded by ecu_lora_rx() and
// delivered to the end user.
//
// No buffering is done in the rxReadyISR function, so it is important to
// call ecu_lora_rx() frequently in order to not drop packets.
//
// We could add buffering in the interrupt routine if we find that packets
// are being dropped.

// Docs for LoRa are at https://github.com/sandeepmistry/arduino-LoRa.git
#include <LoRa.h>

// ECULoRa operational modes
// LEADER: The leader sends messages at regular intervals.
// FOLLOWER: The follower sends messages in response to messages from the leader.
// FREERUN: The ECU sends messages anytime, regardless of whether it receives messages.
enum ECULoRaMode_t {
    LORA_LEADER,
    LORA_FOLLOWER,
    LORA_FREERUN
};

// Our operational mode.
extern ECULoRaMode_t ecu_lora_mode;

// The largest LoRa packet size is 255 bytes.
// Subtract the size of the packet header to get the data buffer size.
// THIS MUST BE ADJUSTED WHEN ECULoRaPacket_t IS CHANGED.
#define ECU_LORA_DATA_BUFSIZE (255-size_t(sizeof(uint32_t)))

// The LoRa packet structure.
struct ECULoRaPacket_t {
    // the message ID generated by the sender
    uint32_t id;
    // the data field
    uint8_t data[ECU_LORA_DATA_BUFSIZE];
    // The number of bytes in the data field.
    // This field must be lst in the structure, and is not transmitted/received.
    uint8_t data_len;
};
// The size of the header of the LoRa packet.
#define ECU_LORA_PACKET_HDR_SIZE (sizeof(ECULoRaPacket_t) - ECU_LORA_DATA_BUFSIZE)

// Information from a LoRa packet is decoded here, for delivery to the end user.
struct ECULoRaMsg_t {
    // The number of messages received since the application started.
    uint32_t count;
    // The message ID provided by the sender
    uint32_t id;
    // The length of the data field
    uint8_t data_len;
    // The data field
    uint8_t data[ECU_LORA_DATA_BUFSIZE];
};

// Initialize the LoRa system
// mode: the operational mode
// leader_report_interval_ms: the minimum interval in ms between leader reports
// ss_pin: the slave select pin
// reset_pin: the reset pin
// interrupt_pin: the interrupt pin
// spi: the SPI bus to use
// lora_sck: the SPI clock pin
// lora_miso: the SPI MISO pin
// lora_mosi: the SPI MOSI pin
bool ECULoRaInit(
    ECULoRaMode_t mode, 
    int leader_report_interval_ms,
    int ss_pin, 
    int reset_pin, 
    int interrupt_pin, 
    SPIClass* spi, 
    int lora_sck, 
    int lora_miso, 
    int lora_mosi);

// Check for a received message.
// Returns true if a received message is ready.
// If true, the message is copied to the msg structure.
extern bool ecu_lora_rx(ECULoRaMsg_t* msg);

// Send a message. It will either be sent immediately,
// or queued to be sent after the next received message.
// It will not be sent if in leader mode and the last message was sent too recently.
// data: the data to send
// len: the length of the data
// Returns true if the message was queued or sent.
extern bool ecu_lora_tx(uint8_t* data, uint8_t len);

// Get the RSSI of the last received message.
extern int ecu_lora_rssi();

// Get the signal-to-noise ratio of the last received message.
extern float ecu_lora_snr();

// Get the frequency error of the last received message.
extern long ecu_lora_frequency_error();

#endif //_ECULORA_H_
